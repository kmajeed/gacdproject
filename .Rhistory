else{
id <- id
}
#  file_path <- paste(directory,id,".csv", sep = '')
#  con <- file(file_path, "r")
#  data <- read.csv(con)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(1,"peter")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- id
}
id
#  file_path <- paste(directory,id,".csv", sep = '')
#  con <- file(file_path, "r")
#  data <- read.csv(con)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(1,"peter")
getmonitor(1,"peter")
getmonitor(101,"peter")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- paste(id,".csv",sep = '')
}
id
#  file_path <- paste(directory,id,".csv", sep = '')
#  con <- file(file_path, "r")
#  data <- read.csv(con)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(101,"peter")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- paste(id,".csv",sep = '')
}
wd < - getwd()
file_path <- paste(wd,directory,id, sep = '/')
#  con <- file(file_path, "r")
#  data <- read.csv(con)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(101,"peter")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- paste(id,".csv",sep = '')
}
wd <- getwd()
file_path <- paste(wd,directory,id, sep = '/')
#  con <- file(file_path, "r")
#  data <- read.csv(con)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(101,"peter")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- paste(id,".csv",sep = '')
}
wd <- getwd()
file_path <- paste(wd,directory,id, sep = '/')
file_path
#  con <- file(file_path, "r")
#  data <- read.csv(con)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(101,"peter")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- paste(id,".csv",sep = '')
}
wd <- getwd()
file_path <- paste(wd,directory,id, sep = '/')
con <- file(file_path, "r")
data <- read.csv(con)
close(con)
head(data)
#  if(summarize == FALSE){
#    result <- head(data)
#  }
#  else{
#    result <- summary(data)
#  }
#  result
}
getmonitor(101,"specdata")
#getmonitor.R
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
if(id < 10){
id <- paste("00",id,".csv",sep='' )
}
else if (id > 9 & id < 99 ){
id <- paste("0",id,".csv",sep='' )
}
else{
id <- paste(id,".csv",sep = '')
}
wd <- getwd()
file_path <- paste(wd,directory,id, sep = '/')
con <- file(file_path, "r")
data <- read.csv(con)
close(con)
if(summarize == FALSE){
result <- head(data)
}
else{
result <- summary(data)
}
result
}
getmonitor(1,"specdata")
data <- getmonitor(1,"specdata")
head(data)
data<- getmonitor(101,"specdata",TRUE)
data
head(data)
getmonitor(101,"specdata",TRUE)
data <- getmonitor(200,"specdata",TRUE)
data
head(data)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
source('~/R/WEEK02.R')
getwd()
source('~/R/WEEK02.R')
getwd()
cube <- function(x, n) {
x^3
}
cube(3)
source('~/R/WEEK02.R')
source('~/R/RP-Quiz01.R')
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
source('~/R/RP-Quiz01.R')
source('~/R/RP-Quiz01.R')
clc
clear
cls
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
source('~/R/RP-Quiz01.R')
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
library(datasets)
data(iris)
?iris
summary(iris)
data[iris$Species == ''virginica',]'
iris[iris$Species == ''virginica',]'
iris[iris$Species == 'virginica',]
mean(iris[iris$Species == 'virginica',])
colMean(iris[iris$Species == 'virginica',])
colMeans(iris[iris$Species == 'virginica',])
source('~/R/RP-Quiz01.R')
source('~/R/RP-Week03Q.R')
source('~/R/RP-Week03Q.R')
source('~/R/RP-Week03Q.R')
source('~/R/RP-Week03Q.R')
source('~/R/RP-Week03Q.R')
data = subset(iris,subset=(iris$Species ='virginica'))
data = subset(iris,subset=(iris$Species =='virginica'))
View(data)
class(data)
data = subset(iris,subset=(iris$Species =='virginica'))$Sepal.Length
class(data)
data
data = mean(subset(iris,subset=(iris$Species =='virginica'))$Sepal.Length)
subset(iris,subset=(iris$Species =='virginica'))
colMeans(subset(iris,subset=(iris$Species =='virginica')))
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(subset(iris,subset=(iris$Species =='virginica')),2,mean)
subset(iris,subset=(iris$Species =='virginica')
data = subset(iris,subset=(iris$Species =='virginica')
data = subset(iris,subset=(iris$Species =='virginica'))
sp_mean = apply(data,2,mean)
View(data)
View(data)
sp_mean = apply(data[,],2,mean)
library(datasets)
data(mtcars)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
table(mtcars)
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
hp_cyl = tapply(mtcars$hp, mtcars$cyl, mean)
diff = hp_cyl(3)-hp_cyl(1)
hp_cyl
hp_cyl(1)
hp_cyl[1]
diff = hp_cyl[3]-hp_cyl[1]
diff
hp_cyl = tapply(mtcars$hp, mtcars$cyl, mean)
diff = abs(hp_cyl[1]-hp_cyl[3])
diff
class(diff)
ls
debug(ls)
ls
ls
undebug(ls)
debug(ls)
ls
ls
ls
debug(ls)
ls
set.seed(1)
rpois(5, 2)
set.seed(1)
kakak = rpois(5, 2)
undebug(ls)
ls
exit
exit()
undebug(ls)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
source('~/R/WEEK02.R')
f <- function(x) {3
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
environment(f)
environment(g)
environment(x)
environment(y)
environment(z)
environment(f)
environment(g)
getwd()
setwd("~/R/RProg/PE01")
source('~/R/RProg/PE01/submitscript1.R')
source('~/R/RProg/PE01/submitscript1.R')
submit()
source('~/R/RProg/PE01/complete.R')
submit()
source('~/R/RProg/PE01/corr.R')
source('~/R/RProg/PE01/pollutantmean.R')
submit()
submit()
submit()
submit()
submit()
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata", 400)
summary(cr)
getwd()
directory = "specdata"
threshold  = 150
data = complete(directory = directory)
data_subset <- data[data$obs >= threshold,]
source('~/R/RProg/PE01/corr.R')
data_subset <- data[data$nobs >= threshold,]
submit()
submit()
submit()
setwd("~/R")
install.packages("httr")
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
#content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
endpoint = oauth_endpoints("github");
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("gacd_majeedk", "eafad1e7499780daf1e7","915f3bcf716f89de44e41a528b5bca55a44c21ab");
# 3. Get OAuth credentials
github_token <- oauth2.0_token(endpoint, myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
#req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
#stop_for_status(req)
#content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
endpoint = oauth_endpoints("github");
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("gacd_majeedk", "eafad1e7499780daf1e7","915f3bcf716f89de44e41a528b5bca55a44c21ab");
# 3. Get OAuth credentials
github_token <- oauth2.0_token(endpoint, myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr
endpoint = oauth_endpoints("github")
endpoint = oauth_endpoints("github");
myapp <- oauth_app("gacd_majeedk", "eafad1e7499780daf1e7","915f3bcf716f89de44e41a528b5bca55a44c21ab")
github_token <- oauth2.0_token(endpoint, myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(endpoint, myapp)
github_token <- oauth2.0_token(endpoint, myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
install.packages(c("class", "mgcv"))
install.packages("jsonlite")
content(req)
test = content(req)
test
str(test)
summary(test)
tbles(test)
source('~/Development/Coursera/Gits/gacdproject/run_analysis.R')
source('~/Development/Coursera/Gits/gacdproject/run_analysis.R')
run_analysis();
